/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#pragma once

#include <osgEarth/Symbol>
#include <osgEarth/Stroke>

namespace osgEarth
{
    /** 
     * Symbol that describes how to draw linear geometry.
     */
    class OSGEARTH_EXPORT LineSymbol : public Symbol
    {
    public:
        META_Object(osgEarth, LineSymbol);

        LineSymbol(const LineSymbol& rhs,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
        LineSymbol(const Config& conf =Config());

        /** dtor */
        virtual ~LineSymbol() { }

        /** Line stroking parameters */
        OE_OPTION(Stroke, stroke);

        /** Tessellate the line geometry such that no segment is longer than this value */
        OE_OPTION(Distance, tessellationSize);

        /** Tessellate the line geometry such that each source segment is divided into this many parts. */
        OE_OPTION(unsigned, tessellation);

        /** Minimum angle (deg) for which to create creases where applicable (like when outlining) */
        OE_OPTION(float, creaseAngle);

        /** URI of an image to load and use to texture lines */
        OE_OPTION(URI, imageURI);

        //! Length of the image (y dimension) in meters
        OE_OPTION(float, imageLength);

        //! Whether to force the use of legacy OpenGL lines (default=false)
        //! instead of the GPU-based lines that are required by GLCORE/GLES
        OE_OPTION(bool, useGLLines);

        /** 3D line as a wire. */
        OE_OPTION(bool, useWireLines);

    public:
        Config getConfig() const override;
        void mergeConfig(const Config& conf) override;
        static void parseSLD(const Config& c, class Style& style);
    };

} // namespace osgEarth
