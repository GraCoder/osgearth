/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#pragma once

#include <osgEarth/Common>
#include <osgEarth/Feature>
#include <osgEarth/FeatureCursor>
#include <osgEarth/ResampleFilter>
#include <osgEarth/Style>
#include <osgEarth/GeoMath>
#include <osgEarth/ShaderUtils>

namespace osgEarth
{
    /** TODO: refactor into GeometryCompiler::Options */
    class OSGEARTH_EXPORT GeometryCompilerOptions
    {
    public:
        //! Set the global default values for the options.
        static void setDefaults(const GeometryCompilerOptions& defaults);

    public:
        //! Construct new compiler options, optionally deserializing them
        GeometryCompilerOptions(const ConfigOptions& conf =ConfigOptions());

    public:
        //! Maximum span of a generated edge, in degrees. Applicable to geocentric maps only
        OE_OPTION(double, maxGranularity, 10.0);

        //! Interpolation type to use for geodetic points
        OE_OPTION(GeoInterpolation, geoInterpolation, GEOINTERP_GREAT_CIRCLE);

        //! Whether to merge geometry from multiple features
        OE_OPTION(bool, mergeGeometry, true);

        //! Expression to evaluate to extract a feature's readable name
        OE_OPTION(StringExpression, featureName);

        //! Whether to cluster feature geometries together for speed
        OE_OPTION(bool, clustering, false);

        //! Whether to enabled draw-instancing for model substitution
        OE_OPTION(bool, instancing, true);

        //! Whether to ignore the altitude filter (e.g. if you plan to do auto-clamping layer)
        OE_OPTION(bool, ignoreAltitudeSymbol, false);

        //todo: merge this with geoInterp()
        OE_OPTION(ResampleFilter::ResampleMode, resampleMode, ResampleFilter::RESAMPLE_LINEAR);
        OE_OPTION(double, resampleMaxLength);

        /** Whether to generate shader components on compiled geometry */
        OE_OPTION(ShaderPolicy, shaderPolicy, SHADERPOLICY_GENERATE);

        /** Whether to run consolidate equivalent state attributes for better performance. */
        OE_OPTION(bool, optimizeStateSharing, true);

        /** Whether to run the optimizer on the resulting group. */
        OE_OPTION(bool, optimize, false);

        /** Whether to run the vertex order optimizer on geometry. */
        OE_OPTION(bool, optimizeVertexOrdering, true);

        /** Whether to run a geometry validation pass on the resulting group. This is for debugging
        purposes and will dump issues to the console. */
        OE_OPTION(bool, validate, false);

        /** Maximum size (angle, degrees) of a polygon tile, when breaking up a large polygon for tessellation;
        only applies to geocentric maps  */
        OE_OPTION(float, maxPolygonTilingAngle, 45.0f);

        /** Whether to use OSG tessellator */
        OE_OPTION(bool, useOSGTessellator, false);

    public:
        Config getConfig() const;

    protected:
        void fromConfig( const Config& conf );

        static GeometryCompilerOptions s_defaults;
    };


    /**
     * Compiles a collection of features against a style.
     */
    class OSGEARTH_EXPORT GeometryCompiler
    {
    public:

        /** Constructs a new geometry compiler with default options. */
        GeometryCompiler();

        /** Constructs a new compiler with preconfigured options. */
        GeometryCompiler( const GeometryCompilerOptions& options );
        
        virtual ~GeometryCompiler() { }
        
        /** Access the options read-only */
        const GeometryCompilerOptions& options() const { return _options; }

        /** Access the options for editing. */
        GeometryCompilerOptions& options() { return _options; }

    public:

        /** Compiles a collection of features into an OSG scene graph. */
        osg::Node* compile(
            FeatureCursor*        input,
            const Style&          style,
            const FilterContext&  context);

        osg::Node* compile(
            Feature*              input,
            const Style&          style,
            const FilterContext&  context);

        osg::Node* compile(
            Feature*              input,
            const FilterContext&  context);

        osg::Node* compile(
            Geometry*             geom,
            const Style&          style,
            const FilterContext&  context);

        osg::Node* compile(
            Geometry*             geom,
            const Style&          style);

        osg::Node* compile(
            Geometry*             geom,
            const FilterContext&  context);

        osg::Node* compile(
            FeatureList&          mungeableInput,
            const Style&          style,
            const FilterContext&  context);

    protected:
        GeometryCompilerOptions _options;
    };
} // namespace osgEarth
